scapy ntp pseudocode


define ntp packet
Requirements:
dest IP (ntp server)
dest port (123 is default)
NTP fields
minimum should be mode, version, transmit timestamp
others that may be required:
stratum of server (in this case will probably be 1, the highest available)
root delay/disparity - delay between server and client and maximum error between server and reference clock. Not strictly necessary
reference ID - source of the reference timestamp. Leave blank
timestamps (reference from the server, origin, receive, and transmit)

What each of the timestamps mean:
Reference - Timestamp of the last time the server was set/corrected
Provided by server, may need to manually get
Origin - Timestamp at which the packet was sent from the client
Set by client
^This is the one we care about
Receive - Time whent he packet was received by the server
Set by server
Transmit - Time when the response packet is received by the server. Set by the server when sending response to client

NTP timestamps are weird, it starts from Jan 1st, 1900, rather than 1973

Scapy handles packet construction and checksums, so thats one less thing we need to deal with. Honestly, this tool seems really cool and easy to use. You just need to find out what is essential when crafting a packet of a sspecific kind. This is where ChatGPT comes in clutch.


ntp_pkt = Ether()/IP(dst="time.google.com")/UDP(dport=123)/NTP(orig_timestamp=orig_timestamp)
#crafting the actual packet ^
print(ntp_pkt.summary())
#this is used to analyze the packet to make sure it's up to snuff

Here is a bare-bones way to create a packet with python

from scapy.all import *
import time #may be needed

class NTP(Packet):
	name = “packet_name”
	fields_desc = [
		ByteField(“flags”,0),
		ByteField(“stratum”,1),
		ByteField(“poll”,0),
		ByteField(“precision”,0),
		IntField(“root_delay”,0),
		IntField(“root_dispersion”,0),
		StrFixedLenField(“reference_id”, b””, length=5),
		IntField(“reference_timetamp”,0),
		IntField(“origin_timestamp”,0),
		IntField(“receive_timestamp”,0),
		IntField(“transmit_timestamp”,0)
	]

ntp_packet = IP(dst=”ntp_server”)/UDP(sport123, dport123)/NTP()

print(“Packet info before sending:”)
ntp_packet.show()

response = sr1(ntp_packet, verbose=0)

if response:
	print(“Response:”)
	response.show()
else:
	print(“no response”)
